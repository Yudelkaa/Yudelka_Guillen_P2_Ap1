@page "/Create"
@using Shared.Models
@inject HttpClient httpClient


<PageTitle>Dealer</PageTitle>
<EditForm Model="vehiculo" OnValidSubmit="Guardar" FormName="vehiculo">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header" style="color: white; background-color: royalblue;">
				<NavLink class="btn btn-light float-end" href="Details">Consultar Vehiculos</NavLink>
				<h1><strong>Crear Vehiculo</strong></h1>
			</div>
			<div class="card-body">

				<div class="row">
					<div class="col-4">
						<label class="fw-bold">Vehiculo ID:</label>
						<div class="input-group mb-3">
							<InputNumber @bind-Value="vehiculo.VehiculoId" class="form-control" aria-describedby="BotonBuscar" />
						</div> 
						<div class="col-9">
							<label class="form-label fw-bold" for="inputFecha">Fecha:</label>
							<InputDate @bind-Value="vehiculo.Fecha" class="form-control" />
							<ValidationMessage For="@(() => vehiculo.Fecha)" />
						</div>

						<div>
							<label class="form-label fw-bold" for="Descripcion">Descripci&oacute;n</label>
							<InputText @bind-Value="vehiculo.Descripcion" class="form-control" />
							<ValidationMessage For="@(() => vehiculo.Descripcion)" />
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-3">
						<label class="form-label fw-bold"> Costos:</label>
						<InputNumber @bind-Value="vehiculo.Costo" class="form-control"></InputNumber>
						<ValidationMessage For="@(() => vehiculo.Costo)" />
					</div>
					<div class="col-3">
						<label class="form-label fw-bold"> Gastos:</label>
						<InputNumber @bind-Value="vehiculo.Gastos" class="form-control" readonly />
					</div>
				</div>
				<br />


				@*Vehiculo detalle*@
				<fieldset class="border-primmary border border-2">

					<div class="card-body col-3">
						<h3 class="fw-bold">Detalle Vehiculo</h3>
						<div>
							<label class="form-label fw-bold">Accesorios Id:</label>
							<InputSelect @bind-Value="Detalle.AccesorioId" class="form-select">
								<option value="">Seleccione el accesorio</option>
								@foreach (var detalle in ListaAccesorios)
								{
									<option value="@detalle.AccesoriosId">@detalle.Descripcion</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => Detalle.AccesorioId)" />

							<label class="form-label fw-bold"> Valor:</label>
							<InputNumber @bind-Value="Detalle.Valor" class="form-control"></InputNumber>
							<button type="button" class="btn btn-success bi bi-plus-square-fill" @onclick="Agregar"> Agregar</button>
							<ValidationMessage For="@(() => Detalle.Valor)" />
						</div>
					</div>

					<div class="card-footer d-flex justify-content-center">
						<a href="/Details" class="btn btn-primary bi bi-house-door-fill">Atrás</a>
						<button type="submit" class="btn btn-primary bi bi-floppy">Guardar<i class="oi oi-document" /></button>
					</div>
					<table class='table table-sm justify-content-center'>
						<thead>
							<tr>
								<th>Vehiculo Id</th>
								<th>Accesorios Id</th>
								<th>Valor</th>
								<th>Eliminar</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var detalle in vehiculo.VehiculoDetalle)
							{
								var nom = ListaAccesorios.FirstOrDefault(a => a.AccesoriosId == detalle.AccesorioId);
								<tr>
									<td>@detalle.VehiculoId</td>
									<td>@detalle.AccesorioId</td>
									<td>@detalle.Valor</td>
									<td>@nom!.Descripcion</td>

									<td><button type="button" class="btn btn-danger bi bi-trash-fill" @onclick=@(() => Borrar(detalle))></button></td>
								</tr>
							}
						</tbody>
					</table>

				</fieldset>
			</div>
		</div>
	</div>

</EditForm>

@code {


	public Vehiculo vehiculo = new Vehiculo();
	public List<Accesorios> ListaAccesorios { get; set; } = new List<Accesorios>();

	public VehiculoDetalle Detalle { get; set; } = new VehiculoDetalle();

	public string? mensaje { get; set; }
	public int resultado { get; set; }
	public int Opcion { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ListaAccesorios = (await httpClient.GetFromJsonAsync<List<Accesorios>>("api/Accesorios"))!;
		vehiculo.Fecha = DateTime.Today;
		Nuevo();
	}


	public async Task Guardar()
	{
		var guardadoVehi = await httpClient.PostAsJsonAsync("api/Vehiculoes", vehiculo);

		if (guardadoVehi.IsSuccessStatusCode)
		{
			resultado = 1;
			mensaje = "Guardado";
			vehiculo = new Vehiculo();
			vehiculo.Fecha = DateTime.Today;
		}
		else
		{
			resultado = 2;
			mensaje = "No se pudo guardar";
		}
	}

	public void Agregar()
	{
		if (Validar())
		{
			resultado = 3;
			mensaje = "ya existe";
		}
		else
		{
			if (Detalle.Valor > 0.01f && Detalle.Valor < 100000)
			{

				vehiculo.Gastos += Detalle.Valor;
				vehiculo.VehiculoDetalle.Add(Detalle);
				Detalle = new VehiculoDetalle();
			}
		}
	}

	public void Borrar(VehiculoDetalle details)
	{
		Detalle = details;
		vehiculo.Gastos -= Detalle.Valor;
		vehiculo.VehiculoDetalle.Remove(Detalle);
	}

	public void Mensaje()
	{
		resultado = 0;
		mensaje = string.Empty;
	}

	public void Nuevo()
	{
		vehiculo = new Vehiculo();
		Mensaje();
		vehiculo.Fecha = DateTime.Today;
	}

	public bool Validar()
	{
		return vehiculo.VehiculoDetalle.
				Any(a => a.AccesorioId == Detalle.AccesorioId);
	}
}