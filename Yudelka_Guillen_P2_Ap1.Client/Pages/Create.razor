@page "/Create"
@using Shared.Models
@inject HttpClient httpClient


<PageTitle>Registro Vehiculo</PageTitle>
<EditForm Model="vehiculo" OnValidSubmit="Guardar" FormName="vehiculo">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header" style="color: white; background-color: royalblue;">
				<NavLink class="btn btn-light float-end" href="Details">Consultar Vehiculos</NavLink>
				<h1><strong>Crear Vehiculo</strong></h1>
			</div>
			<div class="card-body">

				<div class="row">
					<div class="col-4">
						<label><strong>Vehiculo ID:</strong></label>
						<div class="input-group mb-3">
							<InputNumber @bind-Value="vehiculo.VehiculoId" class="form-control" aria-describedby="BotonBuscar" />
							<button @onclick="Buscar" class="btn btn-primary bi bi-search-heart" type="button" id="BotonBuscar"></button>
						</div>
						<div class="col-9">
							<label class="form-label" for="inputFecha"><strong>Fecha:</strong></label>
							<InputDate @bind-Value="vehiculo.Fecha" class="form-control" />
							<ValidationMessage For="@(() => vehiculo.Fecha)" />
						</div>

						<div>
							<label class="form-label" for="Descripcion"><strong>Descripci&oacute;n</strong></label>
							<InputText @bind-Value="vehiculo.Descripcion" class="form-control" />
							<ValidationMessage For="@(() => vehiculo.Descripcion)" />
						</div>

					</div>
				</div>

				<div class="row">
					<div class="col-3">
						<label class="form-label fw-bold"> Costos:</label>
						<InputNumber @bind-Value="vehiculo.Costo" class="form-control"></InputNumber>
						<ValidationMessage For="@(() => vehiculo.Costo)" />
					</div>

					<div class="col-3">
						<label class="form-label fw-bold"> Gastos:</label>
						<InputNumber @bind-Value="vehiculo.Gastos" class="form-control"></InputNumber>
						<ValidationMessage For="@(() => vehiculo.Gastos)" />
					</div>
				</div>
				<br />
			</div>
		</div>
	</div>

	@*Vehiculo detalle*@
	<div class="card shadow-lg">

		<div class="card-header" style="color: white; background-color: royalblue;">
			<h1 class="fw-bold">Detalle Vehiculo</h1>
		</div>
		<div class="card-body col-3">
			<div>
				<label class="form-label fw-bold">Accesorios Id:</label>
				<InputNumber @bind-Value="Detalle.AccesorioId" class="form-control"></InputNumber>
				<ValidationMessage For="@(() => Detalle.AccesorioId)" />
			</div>
			<div>
				<label class="form-label fw-bold"> Valor:</label>
				<InputNumber @bind-Value="Detalle.Valor" class="form-control"></InputNumber>
				<ValidationMessage For="@(() => Detalle.Valor)" />
			</div>
		</div>
		<div class="card-footer d-flex justify-content-center">
			<button type="button" class="btn btn-success bi bi-plus-square-fill" @onclick="AddDetalle"> Agregar</button>
			<button type="submit" class="btn btn-primary bi bi-floppy">Guardar<i class="oi oi-document" /></button>
		</div>
		<table class='table table-sm justify-content-center'>
			<thead>
				<tr>
					<th>Vehiculo Id</th>
					<th>Accesorios Id</th>
					<th>Valor</th>
					<th>Eliminar</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var detalle in vehiculo.VehiculoDetalle)
				{
					var ticketEncontrado = BuscarVehiculo(detalle.VehiculoId);
					<tr>
						<td>@detalle.VehiculoId</td>
						<td>@detalle.AccesorioId</td>
						<td>@detalle.Valor</td>
						<td><button type="button" class="btn btn-danger bi bi-trash" @onclick=@(() => RemoverDetalle(detalle))></button></td>
					</tr>
				}
			</tbody>
		</table>
	</div>
	</div>
</EditForm>

@code {

	[Parameter]
	public int VehiculoId { get; set; }
	List<Vehiculo> listaSolicitado = new List<Vehiculo>();
	public List<VehiculoDetalle> ListaDetalles = new List<VehiculoDetalle>();
	public Vehiculo vehiculo { get; set; } = new Vehiculo();
	public VehiculoDetalle Detalle { get; set; } = new VehiculoDetalle();

	public bool mensajeVacio;
	public int resultado;
	public bool emisorVacio;

	protected override async Task OnInitializedAsync()
	{
		if (VehiculoId > 0)
		{
			this.vehiculo.VehiculoId = VehiculoId;
			await Buscar();
		}
	}

	private async Task<Vehiculo> BuscarVehiculo(int vehiculoId)
	{
		Vehiculo vehiculo = new Vehiculo();
		var vehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculo>($"api/Vehiculo/{vehiculoId}");
		if (vehiculoEncontrado != null)
			return vehiculo = vehiculoEncontrado;
		return new Vehiculo();
	}

	public async Task Guardar()
	{
		var response = await httpClient.PostAsJsonAsync("api/Vehiculo", vehiculo);

		if (!response.IsSuccessStatusCode)
		{
			return;
		}
		vehiculo = new Vehiculo();
	}

	public async Task Buscar()
	{
		var vehiculoIdEncontrado = (await httpClient.GetFromJsonAsync<List<Vehiculo>>($"api/Vehiculo"))!
		.ToList()
		.Any(v => v.VehiculoId == vehiculo.VehiculoId);
		if (vehiculoIdEncontrado)
		{
			var vehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculo>($"api/Vehiculo/{vehiculo.VehiculoId}");
			if (vehiculoEncontrado != null)
			{
				this.vehiculo = vehiculoEncontrado;
				StateHasChanged();
			}
		}
		else
		{
			return;
		}
	}

	public async Task AddDetalle()
	{
		vehiculo.VehiculoDetalle.Add(Detalle);
		Detalle = new VehiculoDetalle();
	}


	public async Task RemoverDetalle(VehiculoDetalle detalle)
	{

		var detalleEncontrado = vehiculo.VehiculoDetalle.FirstOrDefault(v => v.Id == detalle.Id);
		if (detalleEncontrado != null)
		{
			var ticket = BuscarVehiculo(detalleEncontrado.VehiculoId);
			detalle = detalleEncontrado;
			Detalle = detalleEncontrado;
			vehiculo.VehiculoDetalle.Remove(detalle);
			await httpClient.DeleteAsync($"api/Tickets/DeleteTicketsMessages/{detalle.Id}");
		}
	}

}